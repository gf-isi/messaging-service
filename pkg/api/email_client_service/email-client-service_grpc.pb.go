// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: email_client_service/email-client-service.proto

package email_client_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailClientServiceApiClient is the client API for EmailClientServiceApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailClientServiceApiClient interface {
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceStatus, error)
	SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*ServiceStatus, error)
}

type emailClientServiceApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailClientServiceApiClient(cc grpc.ClientConnInterface) EmailClientServiceApiClient {
	return &emailClientServiceApiClient{cc}
}

func (c *emailClientServiceApiClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.email_client_service.EmailClientServiceApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailClientServiceApiClient) SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*ServiceStatus, error) {
	out := new(ServiceStatus)
	err := c.cc.Invoke(ctx, "/influenzanet.email_client_service.EmailClientServiceApi/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailClientServiceApiServer is the server API for EmailClientServiceApi service.
// All implementations must embed UnimplementedEmailClientServiceApiServer
// for forward compatibility
type EmailClientServiceApiServer interface {
	Status(context.Context, *emptypb.Empty) (*ServiceStatus, error)
	SendEmail(context.Context, *SendEmailReq) (*ServiceStatus, error)
	mustEmbedUnimplementedEmailClientServiceApiServer()
}

// UnimplementedEmailClientServiceApiServer must be embedded to have forward compatible implementations.
type UnimplementedEmailClientServiceApiServer struct {
}

func (UnimplementedEmailClientServiceApiServer) Status(context.Context, *emptypb.Empty) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedEmailClientServiceApiServer) SendEmail(context.Context, *SendEmailReq) (*ServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailClientServiceApiServer) mustEmbedUnimplementedEmailClientServiceApiServer() {}

// UnsafeEmailClientServiceApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailClientServiceApiServer will
// result in compilation errors.
type UnsafeEmailClientServiceApiServer interface {
	mustEmbedUnimplementedEmailClientServiceApiServer()
}

func RegisterEmailClientServiceApiServer(s grpc.ServiceRegistrar, srv EmailClientServiceApiServer) {
	s.RegisterService(&EmailClientServiceApi_ServiceDesc, srv)
}

func _EmailClientServiceApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailClientServiceApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.email_client_service.EmailClientServiceApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailClientServiceApiServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailClientServiceApi_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailClientServiceApiServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influenzanet.email_client_service.EmailClientServiceApi/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailClientServiceApiServer).SendEmail(ctx, req.(*SendEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailClientServiceApi_ServiceDesc is the grpc.ServiceDesc for EmailClientServiceApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailClientServiceApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "influenzanet.email_client_service.EmailClientServiceApi",
	HandlerType: (*EmailClientServiceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _EmailClientServiceApi_Status_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _EmailClientServiceApi_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "email_client_service/email-client-service.proto",
}
