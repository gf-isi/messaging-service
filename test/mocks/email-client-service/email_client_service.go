// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/email_client_service/email-client-service_grpc.pb.go

// Package mock_email_client_service is a generated GoMock package.
package mock_email_client_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	email_client_service "github.com/influenzanet/messaging-service/pkg/api/email_client_service"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockEmailClientServiceApiClient is a mock of EmailClientServiceApiClient interface.
type MockEmailClientServiceApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailClientServiceApiClientMockRecorder
}

// MockEmailClientServiceApiClientMockRecorder is the mock recorder for MockEmailClientServiceApiClient.
type MockEmailClientServiceApiClientMockRecorder struct {
	mock *MockEmailClientServiceApiClient
}

// NewMockEmailClientServiceApiClient creates a new mock instance.
func NewMockEmailClientServiceApiClient(ctrl *gomock.Controller) *MockEmailClientServiceApiClient {
	mock := &MockEmailClientServiceApiClient{ctrl: ctrl}
	mock.recorder = &MockEmailClientServiceApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailClientServiceApiClient) EXPECT() *MockEmailClientServiceApiClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailClientServiceApiClient) SendEmail(ctx context.Context, in *email_client_service.SendEmailReq, opts ...grpc.CallOption) (*email_client_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(*email_client_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailClientServiceApiClientMockRecorder) SendEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailClientServiceApiClient)(nil).SendEmail), varargs...)
}

// Status mocks base method.
func (m *MockEmailClientServiceApiClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*email_client_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*email_client_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockEmailClientServiceApiClientMockRecorder) Status(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockEmailClientServiceApiClient)(nil).Status), varargs...)
}

// MockEmailClientServiceApiServer is a mock of EmailClientServiceApiServer interface.
type MockEmailClientServiceApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailClientServiceApiServerMockRecorder
}

// MockEmailClientServiceApiServerMockRecorder is the mock recorder for MockEmailClientServiceApiServer.
type MockEmailClientServiceApiServerMockRecorder struct {
	mock *MockEmailClientServiceApiServer
}

// NewMockEmailClientServiceApiServer creates a new mock instance.
func NewMockEmailClientServiceApiServer(ctrl *gomock.Controller) *MockEmailClientServiceApiServer {
	mock := &MockEmailClientServiceApiServer{ctrl: ctrl}
	mock.recorder = &MockEmailClientServiceApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailClientServiceApiServer) EXPECT() *MockEmailClientServiceApiServerMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailClientServiceApiServer) SendEmail(arg0 context.Context, arg1 *email_client_service.SendEmailReq) (*email_client_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1)
	ret0, _ := ret[0].(*email_client_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailClientServiceApiServerMockRecorder) SendEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailClientServiceApiServer)(nil).SendEmail), arg0, arg1)
}

// Status mocks base method.
func (m *MockEmailClientServiceApiServer) Status(arg0 context.Context, arg1 *emptypb.Empty) (*email_client_service.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*email_client_service.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockEmailClientServiceApiServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockEmailClientServiceApiServer)(nil).Status), arg0, arg1)
}

// mustEmbedUnimplementedEmailClientServiceApiServer mocks base method.
func (m *MockEmailClientServiceApiServer) mustEmbedUnimplementedEmailClientServiceApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailClientServiceApiServer")
}

// mustEmbedUnimplementedEmailClientServiceApiServer indicates an expected call of mustEmbedUnimplementedEmailClientServiceApiServer.
func (mr *MockEmailClientServiceApiServerMockRecorder) mustEmbedUnimplementedEmailClientServiceApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailClientServiceApiServer", reflect.TypeOf((*MockEmailClientServiceApiServer)(nil).mustEmbedUnimplementedEmailClientServiceApiServer))
}

// MockUnsafeEmailClientServiceApiServer is a mock of UnsafeEmailClientServiceApiServer interface.
type MockUnsafeEmailClientServiceApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEmailClientServiceApiServerMockRecorder
}

// MockUnsafeEmailClientServiceApiServerMockRecorder is the mock recorder for MockUnsafeEmailClientServiceApiServer.
type MockUnsafeEmailClientServiceApiServerMockRecorder struct {
	mock *MockUnsafeEmailClientServiceApiServer
}

// NewMockUnsafeEmailClientServiceApiServer creates a new mock instance.
func NewMockUnsafeEmailClientServiceApiServer(ctrl *gomock.Controller) *MockUnsafeEmailClientServiceApiServer {
	mock := &MockUnsafeEmailClientServiceApiServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEmailClientServiceApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEmailClientServiceApiServer) EXPECT() *MockUnsafeEmailClientServiceApiServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEmailClientServiceApiServer mocks base method.
func (m *MockUnsafeEmailClientServiceApiServer) mustEmbedUnimplementedEmailClientServiceApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailClientServiceApiServer")
}

// mustEmbedUnimplementedEmailClientServiceApiServer indicates an expected call of mustEmbedUnimplementedEmailClientServiceApiServer.
func (mr *MockUnsafeEmailClientServiceApiServerMockRecorder) mustEmbedUnimplementedEmailClientServiceApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailClientServiceApiServer", reflect.TypeOf((*MockUnsafeEmailClientServiceApiServer)(nil).mustEmbedUnimplementedEmailClientServiceApiServer))
}
